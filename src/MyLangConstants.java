/* Generated By:JavaCC: Do not edit this line. MyLangConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyLangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 6;
  /** RegularExpression Id. */
  int MINUS = 7;
  /** RegularExpression Id. */
  int MULTIPLY = 8;
  /** RegularExpression Id. */
  int DIVIDE = 9;
  /** RegularExpression Id. */
  int RETURN = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int ELSE = 12;
  /** RegularExpression Id. */
  int WHILE = 13;
  /** RegularExpression Id. */
  int FUNC = 14;
  /** RegularExpression Id. */
  int VAR = 15;
  /** RegularExpression Id. */
  int TRUE = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int READ = 18;
  /** RegularExpression Id. */
  int WRITE = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int LT = 21;
  /** RegularExpression Id. */
  int GT = 22;
  /** RegularExpression Id. */
  int EQ = 23;
  /** RegularExpression Id. */
  int NE = 24;
  /** RegularExpression Id. */
  int NOT = 25;
  /** RegularExpression Id. */
  int LP = 26;
  /** RegularExpression Id. */
  int RP = 27;
  /** RegularExpression Id. */
  int LCB = 28;
  /** RegularExpression Id. */
  int RCB = 29;
  /** RegularExpression Id. */
  int LSP = 30;
  /** RegularExpression Id. */
  int RSP = 31;
  /** RegularExpression Id. */
  int AND = 32;
  /** RegularExpression Id. */
  int OR = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int LENGTH = 35;
  /** RegularExpression Id. */
  int GET = 36;
  /** RegularExpression Id. */
  int ADD = 37;
  /** RegularExpression Id. */
  int INTEGER = 38;
  /** RegularExpression Id. */
  int OPERATOR = 39;
  /** RegularExpression Id. */
  int ID = 40;
  /** RegularExpression Id. */
  int DIGIT = 41;
  /** RegularExpression Id. */
  int INITIAL = 42;
  /** RegularExpression Id. */
  int SUBSEQUENT = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"return\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"func\"",
    "\"var\"",
    "\"true\"",
    "\"false\"",
    "\"read\"",
    "\"write\"",
    "\"break\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\"!=\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"&&\"",
    "\"||\"",
    "\".\"",
    "\"len\"",
    "\"get\"",
    "\"add\"",
    "<INTEGER>",
    "<OPERATOR>",
    "<ID>",
    "<DIGIT>",
    "<INITIAL>",
    "<SUBSEQUENT>",
    "\"=\"",
    "\";\"",
    "\",\"",
    "\"\\\"\"",
  };

}
