/* Generated By:JavaCC: Do not edit this line. MyLang.java */
import java.util.Scanner;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class MyLang implements MyLangConstants {
  public static void main(String args []) throws ParseException, TokenMgrError, NumberFormatException
    {
    try {
      MyLang parser = null;
      if (args.length > 0)
      parser = new MyLang(new FileInputStream(args[0]));
      else
      {
             System.out.print("Program filename: ");
             Scanner in = new Scanner(System.in);
             parser = new MyLang(new FileInputStream(in.next()));
       }
      Statement stm = MyLang.Start();
    //  System.out.print(stm);
      stm.evaluate(new Env());
    }
    catch (FileNotFoundException e)
    {
           System.out.println(e.getMessage());
    }
    catch (RuntimeException e)
    {
           System.out.println(e.getMessage());
    }
            System.exit(0);
  }

//start
  static final public Statement Start() throws ParseException {
    trace_call("Start");
    try {
  Statement stm = new EmptyStm();
      stm = multiStatement();
      jj_consume_token(0);
   {if (true) return stm;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Start");
    }
  }

  static final public Declaration decParse() throws ParseException {
    trace_call("decParse");
    try {
 Token id; Expression exp;
      jj_consume_token(VAR);
      id = jj_consume_token(ID);
      jj_consume_token(44);
      exp = expParse();
      jj_consume_token(45);
   {if (true) return new Declaration(id.image, exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("decParse");
    }
  }

  static final public Expression varParse() throws ParseException {
    trace_call("varParse");
    try {
 Token id;
      id = jj_consume_token(ID);
    {if (true) return new Variable(id.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("varParse");
    }
  }

  static final public Expression readParse() throws ParseException {
    trace_call("readParse");
    try {
 Expression exp;
      jj_consume_token(READ);
   exp = new Read();
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("readParse");
    }
  }

  static final public Write writeParse() throws ParseException {
    trace_call("writeParse");
    try {
 Expression exp;
      jj_consume_token(WRITE);
      exp = expParse();
      jj_consume_token(45);
   {if (true) return new Write(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("writeParse");
    }
  }

  static final public Parameter paramParse() throws ParseException {
    trace_call("paramParse");
    try {
 Expression exp;
      exp = expParse();
   {if (true) return new Parameter(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramParse");
    }
  }

  static final public Parameter multiParamParse() throws ParseException {
    trace_call("multiParamParse");
    try {
 Parameter first = null; Parameter last = null; Parameter next = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case TRUE:
      case FALSE:
      case READ:
      case NOT:
      case LP:
      case LSP:
      case INTEGER:
      case ID:
      case 47:
        last = paramParse();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 46:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(46);
          next = paramParse();
        }
    if(first == null)
        first = last;
    last.nextParam = next;
    last = next;
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
   {if (true) return first;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("multiParamParse");
    }
  }

  static final public FunctionCallExpression funcCallExpParse() throws ParseException {
    trace_call("funcCallExpParse");
    try {
  Parameter p = null; Token id;
      id = jj_consume_token(ID);
      jj_consume_token(LP);
      p = multiParamParse();
      jj_consume_token(RP);
   {if (true) return new FunctionCallExpression(id.image, p);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("funcCallExpParse");
    }
  }

  static final public Expression listParse() throws ParseException {
    trace_call("listParse");
    try {
 ListExp listExp = new ListExp(); Expression exp1 = null; Expression exp2 = null;
      jj_consume_token(LSP);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case TRUE:
        case FALSE:
        case READ:
        case NOT:
        case LP:
        case LSP:
        case INTEGER:
        case ID:
        case 47:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        exp2 = expParse();
                      listExp.addExp(exp2);
      }
   exp1 = listExp;
      jj_consume_token(RSP);
   {if (true) return exp1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("listParse");
    }
  }

  static final public Expression primaryExpParse() throws ParseException {
    trace_call("primaryExpParse");
    try {
  Expression exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case TRUE:
      case FALSE:
      case INTEGER:
      case 47:
        exp = literalParse();
        break;
      default:
        jj_la1[3] = jj_gen;
        if (jj_2_1(2147483647)) {
          exp = funcCallExpParse();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            exp = varParse();
            break;
          case LSP:
            exp = listParse();
            break;
          case LP:
            jj_consume_token(LP);
            exp = expParse();
            jj_consume_token(RP);
            break;
          case READ:
            exp = readParse();
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("primaryExpParse");
    }
  }

  static final public Expression postfixExpParse() throws ParseException {
    trace_call("postfixExpParse");
    try {
 Expression exp, exp2;
      exp = primaryExpParse();
      label_3:
      while (true) {
        if (jj_2_2(2147483647)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
                                           exp = new ListLength(exp);
      }
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("postfixExpParse");
    }
  }

  static final public Expression notExpParse() throws ParseException {
    trace_call("notExpParse");
    try {
 Expression exp;
      label_4:
      while (true) {
        jj_consume_token(NOT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
      }
      exp = postfixExpParse();
                                      exp = new Not(exp);
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("notExpParse");
    }
  }

  static final public Expression prefixExpParse() throws ParseException {
    trace_call("prefixExpParse");
    try {
  Expression exp = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        exp = notExpParse();
        break;
      case MINUS:
      case TRUE:
      case FALSE:
      case READ:
      case LP:
      case LSP:
      case INTEGER:
      case ID:
      case 47:
        exp = postfixExpParse();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("prefixExpParse");
    }
  }

  static final public Expression multiplicativeExpParse() throws ParseException {
    trace_call("multiplicativeExpParse");
    try {
 Expression left, right;
      left = prefixExpParse();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          right = prefixExpParse();
                                              left = new Multiply(left, right);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          right = prefixExpParse();
                                            left = new Divide(left, right);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
   {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("multiplicativeExpParse");
    }
  }

  static final public Expression additiveExpParse() throws ParseException {
    trace_call("additiveExpParse");
    try {
  Expression left, right;
      left = multiplicativeExpParse();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          right = multiplicativeExpParse();
                                                  left = new Add(left, right);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          right = multiplicativeExpParse();
                                                   left = new Subtract(left, right);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
   {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("additiveExpParse");
    }
  }

  static final public Expression comparisonExpsParse() throws ParseException {
    trace_call("comparisonExpsParse");
    try {
 Expression left, right;
      left = additiveExpParse();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
        case GT:
        case EQ:
        case NE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          right = additiveExpParse();
                                          left = new LessThan(left, right);
          break;
        case GT:
          jj_consume_token(GT);
          right = additiveExpParse();
                                          left = new GreaterThan(left, right);
          break;
        case EQ:
          jj_consume_token(EQ);
          right = additiveExpParse();
                                          left = new Equal(left, right);
          break;
        case NE:
          jj_consume_token(NE);
          right = additiveExpParse();
                                          left = new NotEqual(left, right);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("comparisonExpsParse");
    }
  }

  static final public Expression andExpParse() throws ParseException {
    trace_call("andExpParse");
    try {
 Expression left, right;
      left = comparisonExpsParse();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
        jj_consume_token(AND);
        right = comparisonExpsParse();
                                              left = new And(left, right);
      }
   {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("andExpParse");
    }
  }

  static final public Expression orExpParse() throws ParseException {
    trace_call("orExpParse");
    try {
 Expression left, right;
      left = andExpParse();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        jj_consume_token(OR);
        right = andExpParse();
                                     left = new Or(left, right);
      }
   {if (true) return left;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("orExpParse");
    }
  }

  static final public Expression expParse() throws ParseException {
    trace_call("expParse");
    try {
 Expression exp;
      exp = orExpParse();
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expParse");
    }
  }

  static final public Assign assignParse() throws ParseException {
    trace_call("assignParse");
    try {
 Token id; Expression exp;
      id = jj_consume_token(ID);
      jj_consume_token(44);
      exp = expParse();
      jj_consume_token(45);
   {if (true) return new Assign(id.image, exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("assignParse");
    }
  }

  static final public Conditional conditionParse() throws ParseException {
    trace_call("conditionParse");
    try {
  Expression cond = null;
Statement thenStm = new EmptyStm();
Statement elseStm = new EmptyStm();
      jj_consume_token(IF);
      jj_consume_token(LP);
      cond = expParse();
      jj_consume_token(RP);
      jj_consume_token(LCB);
      thenStm = multiStatement();
      jj_consume_token(RCB);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(LCB);
        elseStm = multiStatement();
        jj_consume_token(RCB);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    {if (true) return new Conditional(cond, thenStm, elseStm);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("conditionParse");
    }
  }

  static final public WhileLoop whileLoopParse() throws ParseException {
    trace_call("whileLoopParse");
    try {
  Expression cond = null; Statement stm = new EmptyStm();
      jj_consume_token(WHILE);
      jj_consume_token(LP);
      cond = expParse();
      jj_consume_token(RP);
      jj_consume_token(LCB);
      stm = multiStatement();
      jj_consume_token(RCB);
   {if (true) return new WhileLoop(cond, stm);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("whileLoopParse");
    }
  }

  static final public FormalParameter formalParamParse() throws ParseException {
    trace_call("formalParamParse");
    try {
 Token id = null;
      id = jj_consume_token(ID);
   {if (true) return new FormalParameter(id.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("formalParamParse");
    }
  }

  static final public FormalParameter multiFormalParam() throws ParseException {
    trace_call("multiFormalParam");
    try {
  FormalParameter first = null; FormalParameter last = null; FormalParameter next = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        last = formalParamParse();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 46:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_10;
          }
          jj_consume_token(46);
          next = formalParamParse();
        }
        if(first == null)
                first = last;
        last.next = next;
        last = next;
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      {if (true) return first;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("multiFormalParam");
    }
  }

  static final public FunctionDeclaration funcDecParse() throws ParseException {
    trace_call("funcDecParse");
    try {
  Token id; FormalParameter fp; Statement stm;
      jj_consume_token(FUNC);
      id = jj_consume_token(ID);
      jj_consume_token(LP);
      fp = multiFormalParam();
      jj_consume_token(RP);
      jj_consume_token(LCB);
      stm = multiStatement();
      jj_consume_token(RCB);
    {if (true) return new FunctionDeclaration(id.image, fp, stm);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("funcDecParse");
    }
  }

  static final public Return returnParse() throws ParseException {
    trace_call("returnParse");
    try {
  Expression exp;
      jj_consume_token(RETURN);
      exp = expParse();
      jj_consume_token(45);
   {if (true) return new Return(exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("returnParse");
    }
  }

//doesn't return anything
  static final public ListAdd listAddParse() throws ParseException {
    trace_call("listAddParse");
    try {
 Expression exp, exp2;
      exp = primaryExpParse();
      jj_consume_token(DOT);
      jj_consume_token(ADD);
      jj_consume_token(LP);
      exp2 = intLiteralParse();
      jj_consume_token(RP);
      jj_consume_token(45);
   {if (true) return new ListAdd(exp2);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("listAddParse");
    }
  }

  static final public AddtoList addtoListParse() throws ParseException {
    trace_call("addtoListParse");
    try {
 Expression list, exp;
      jj_consume_token(ADD);
      jj_consume_token(LP);
      list = listParse();
      jj_consume_token(46);
      exp = intLiteralParse();
      jj_consume_token(RP);
      jj_consume_token(45);
 {if (true) return new AddtoList(list, exp);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("addtoListParse");
    }
  }

  static final public FunctionCallStm funcCallStmParse() throws ParseException {
    trace_call("funcCallStmParse");
    try {
  Parameter p = null; Token id;
      id = jj_consume_token(ID);
      jj_consume_token(LP);
      p = multiParamParse();
      jj_consume_token(RP);
      jj_consume_token(45);
    {if (true) return new FunctionCallStm(id.image, p);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("funcCallStmParse");
    }
  }

  static final public Statement statementParse() throws ParseException {
    trace_call("statementParse");
    try {
  Statement stm = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        stm = decParse();
        break;
      default:
        jj_la1[18] = jj_gen;
        if (jj_2_3(2147483647)) {
          stm = funcCallStmParse();
        } else if (jj_2_4(2147483647)) {
          stm = assignParse();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MINUS:
          case TRUE:
          case FALSE:
          case READ:
          case LP:
          case LSP:
          case INTEGER:
          case ID:
          case 47:
            stm = listAddParse();
            break;
          case ADD:
            stm = addtoListParse();
            break;
          case IF:
            stm = conditionParse();
            break;
          case WHILE:
            stm = whileLoopParse();
            break;
          case FUNC:
            stm = funcDecParse();
            break;
          case RETURN:
            stm = returnParse();
            break;
          case WRITE:
            stm = writeParse();
            break;
          default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
   {if (true) return stm;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statementParse");
    }
  }

  static final public Statement multiStatement() throws ParseException {
    trace_call("multiStatement");
    try {
  Statement first = new EmptyStm(); Statement last = first; Statement next = null;
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case RETURN:
        case IF:
        case WHILE:
        case FUNC:
        case VAR:
        case TRUE:
        case FALSE:
        case READ:
        case WRITE:
        case LP:
        case LSP:
        case ADD:
        case INTEGER:
        case ID:
        case 47:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_11;
        }
        next = statementParse();
    last.next = next;
    last = next;
      }
   {if (true) return first;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("multiStatement");
    }
  }

  static final public StrLiteral strLiteralParse() throws ParseException {
    trace_call("strLiteralParse");
    try {
 Token t;
      jj_consume_token(47);
      t = jj_consume_token(ID);
      jj_consume_token(47);
                       {if (true) return new StrLiteral(t.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("strLiteralParse");
    }
  }

  static final public BoolLiteral boolLiteralParse() throws ParseException {
    trace_call("boolLiteralParse");
    try {
  Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        t = jj_consume_token(TRUE);
                 {if (true) return new BoolLiteral(true);}
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                  {if (true) return new BoolLiteral(false);}
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("boolLiteralParse");
    }
  }

  static final public IntLiteral digit() throws ParseException {
    trace_call("digit");
    try {
  Token t;
      t = jj_consume_token(INTEGER);
                    {if (true) return new IntLiteral(Integer.parseInt(t.image));}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("digit");
    }
  }

  static final public Expression intLiteralParse() throws ParseException {
    trace_call("intLiteralParse");
    try {
 Expression exp = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
        exp = digit();
                           {if (true) return new UnaryExp(exp);}
        break;
      case INTEGER:
        exp = digit();
                  {if (true) return exp;}
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("intLiteralParse");
    }
  }

  static final public Expression literalParse() throws ParseException {
    trace_call("literalParse");
    try {
  Expression exp;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
        exp = boolLiteralParse();
        break;
      case 47:
        exp = strLiteralParse();
        break;
      case MINUS:
      case INTEGER:
        exp = intLiteralParse();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
   {if (true) return exp;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("literalParse");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x46070080,0x46070080,0x30080,0x44040000,0x2000000,0x46070080,0x300,0x300,0xc0,0xc0,0x1e00000,0x1e00000,0x0,0x0,0x1000,0x0,0x0,0x8000,0x440f6c80,0x440fec80,0x30000,0x80,0x30080,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000,0x8140,0x8140,0x8040,0x100,0x0,0x8140,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x0,0x4000,0x100,0x0,0x8160,0x8160,0x0,0x40,0x8040,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyLang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyLang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyLang(MyLangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
